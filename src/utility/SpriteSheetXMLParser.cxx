// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SpriteSheetXMLParser.hxx"

// TextureAtlas
// 

const TextureAtlas::sprite_sequence& TextureAtlas::
sprite () const
{
  return this->sprite_;
}

TextureAtlas::sprite_sequence& TextureAtlas::
sprite ()
{
  return this->sprite_;
}

void TextureAtlas::
sprite (const sprite_sequence& s)
{
  this->sprite_ = s;
}

const TextureAtlas::height_type& TextureAtlas::
height () const
{
  return this->height_.get ();
}

TextureAtlas::height_type& TextureAtlas::
height ()
{
  return this->height_.get ();
}

void TextureAtlas::
height (const height_type& x)
{
  this->height_.set (x);
}

const TextureAtlas::imagePath_type& TextureAtlas::
imagePath () const
{
  return this->imagePath_.get ();
}

TextureAtlas::imagePath_type& TextureAtlas::
imagePath ()
{
  return this->imagePath_.get ();
}

void TextureAtlas::
imagePath (const imagePath_type& x)
{
  this->imagePath_.set (x);
}

void TextureAtlas::
imagePath (::std::auto_ptr< imagePath_type > x)
{
  this->imagePath_.set (x);
}

const TextureAtlas::width_type& TextureAtlas::
width () const
{
  return this->width_.get ();
}

TextureAtlas::width_type& TextureAtlas::
width ()
{
  return this->width_.get ();
}

void TextureAtlas::
width (const width_type& x)
{
  this->width_.set (x);
}


// sprite
// 

const sprite::h_type& sprite::
h () const
{
  return this->h_.get ();
}

sprite::h_type& sprite::
h ()
{
  return this->h_.get ();
}

void sprite::
h (const h_type& x)
{
  this->h_.set (x);
}

const sprite::n_type& sprite::
n () const
{
  return this->n_.get ();
}

sprite::n_type& sprite::
n ()
{
  return this->n_.get ();
}

void sprite::
n (const n_type& x)
{
  this->n_.set (x);
}

void sprite::
n (::std::auto_ptr< n_type > x)
{
  this->n_.set (x);
}

const sprite::oH_optional& sprite::
oH () const
{
  return this->oH_;
}

sprite::oH_optional& sprite::
oH ()
{
  return this->oH_;
}

void sprite::
oH (const oH_type& x)
{
  this->oH_.set (x);
}

void sprite::
oH (const oH_optional& x)
{
  this->oH_ = x;
}

const sprite::oW_optional& sprite::
oW () const
{
  return this->oW_;
}

sprite::oW_optional& sprite::
oW ()
{
  return this->oW_;
}

void sprite::
oW (const oW_type& x)
{
  this->oW_.set (x);
}

void sprite::
oW (const oW_optional& x)
{
  this->oW_ = x;
}

const sprite::oX_optional& sprite::
oX () const
{
  return this->oX_;
}

sprite::oX_optional& sprite::
oX ()
{
  return this->oX_;
}

void sprite::
oX (const oX_type& x)
{
  this->oX_.set (x);
}

void sprite::
oX (const oX_optional& x)
{
  this->oX_ = x;
}

const sprite::oY_optional& sprite::
oY () const
{
  return this->oY_;
}

sprite::oY_optional& sprite::
oY ()
{
  return this->oY_;
}

void sprite::
oY (const oY_type& x)
{
  this->oY_.set (x);
}

void sprite::
oY (const oY_optional& x)
{
  this->oY_ = x;
}

const sprite::pX_type& sprite::
pX () const
{
  return this->pX_.get ();
}

sprite::pX_type& sprite::
pX ()
{
  return this->pX_.get ();
}

void sprite::
pX (const pX_type& x)
{
  this->pX_.set (x);
}

const sprite::pY_type& sprite::
pY () const
{
  return this->pY_.get ();
}

sprite::pY_type& sprite::
pY ()
{
  return this->pY_.get ();
}

void sprite::
pY (const pY_type& x)
{
  this->pY_.set (x);
}

const sprite::w_type& sprite::
w () const
{
  return this->w_.get ();
}

sprite::w_type& sprite::
w ()
{
  return this->w_.get ();
}

void sprite::
w (const w_type& x)
{
  this->w_.set (x);
}

const sprite::x_type& sprite::
x () const
{
  return this->x_.get ();
}

sprite::x_type& sprite::
x ()
{
  return this->x_.get ();
}

void sprite::
x (const x_type& x)
{
  this->x_.set (x);
}

const sprite::y_type& sprite::
y () const
{
  return this->y_.get ();
}

sprite::y_type& sprite::
y ()
{
  return this->y_.get ();
}

void sprite::
y (const y_type& x)
{
  this->y_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// TextureAtlas
//

TextureAtlas::
TextureAtlas (const height_type& height,
              const imagePath_type& imagePath,
              const width_type& width)
: ::xml_schema::type (),
  sprite_ (this),
  height_ (height, this),
  imagePath_ (imagePath, this),
  width_ (width, this)
{
}

TextureAtlas::
TextureAtlas (const TextureAtlas& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  sprite_ (x.sprite_, f, this),
  height_ (x.height_, f, this),
  imagePath_ (x.imagePath_, f, this),
  width_ (x.width_, f, this)
{
}

TextureAtlas::
TextureAtlas (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  sprite_ (this),
  height_ (this),
  imagePath_ (this),
  width_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void TextureAtlas::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // sprite
    //
    if (n.name () == "sprite" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< sprite_type > r (
        sprite_traits::create (i, f, this));

      this->sprite_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      this->height_.set (height_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "imagePath" && n.namespace_ ().empty ())
    {
      this->imagePath_.set (imagePath_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      this->width_.set (width_traits::create (i, f, this));
      continue;
    }
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "height",
      "");
  }

  if (!imagePath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "imagePath",
      "");
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "width",
      "");
  }
}

TextureAtlas* TextureAtlas::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TextureAtlas (*this, f, c);
}

TextureAtlas& TextureAtlas::
operator= (const TextureAtlas& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->sprite_ = x.sprite_;
    this->height_ = x.height_;
    this->imagePath_ = x.imagePath_;
    this->width_ = x.width_;
  }

  return *this;
}

TextureAtlas::
~TextureAtlas ()
{
}

// sprite
//

sprite::
sprite (const h_type& h,
        const n_type& n,
        const pX_type& pX,
        const pY_type& pY,
        const w_type& w,
        const x_type& x,
        const y_type& y)
: ::xml_schema::type (),
  h_ (h, this),
  n_ (n, this),
  oH_ (this),
  oW_ (this),
  oX_ (this),
  oY_ (this),
  pX_ (pX, this),
  pY_ (pY, this),
  w_ (w, this),
  x_ (x, this),
  y_ (y, this)
{
}

sprite::
sprite (const sprite& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  h_ (x.h_, f, this),
  n_ (x.n_, f, this),
  oH_ (x.oH_, f, this),
  oW_ (x.oW_, f, this),
  oX_ (x.oX_, f, this),
  oY_ (x.oY_, f, this),
  pX_ (x.pX_, f, this),
  pY_ (x.pY_, f, this),
  w_ (x.w_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this)
{
}

sprite::
sprite (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  h_ (this),
  n_ (this),
  oH_ (this),
  oW_ (this),
  oX_ (this),
  oY_ (this),
  pX_ (this),
  pY_ (this),
  w_ (this),
  x_ (this),
  y_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void sprite::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (h_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "n" && n.namespace_ ().empty ())
    {
      this->n_.set (n_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "oH" && n.namespace_ ().empty ())
    {
      this->oH_.set (oH_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "oW" && n.namespace_ ().empty ())
    {
      this->oW_.set (oW_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "oX" && n.namespace_ ().empty ())
    {
      this->oX_.set (oX_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "oY" && n.namespace_ ().empty ())
    {
      this->oY_.set (oY_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "pX" && n.namespace_ ().empty ())
    {
      this->pX_.set (pX_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "pY" && n.namespace_ ().empty ())
    {
      this->pY_.set (pY_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "w" && n.namespace_ ().empty ())
    {
      this->w_.set (w_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "h",
      "");
  }

  if (!n_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "n",
      "");
  }

  if (!pX_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "pX",
      "");
  }

  if (!pY_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "pY",
      "");
  }

  if (!w_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "w",
      "");
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }
}

sprite* sprite::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sprite (*this, f, c);
}

sprite& sprite::
operator= (const sprite& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->h_ = x.h_;
    this->n_ = x.n_;
    this->oH_ = x.oH_;
    this->oW_ = x.oW_;
    this->oX_ = x.oX_;
    this->oY_ = x.oY_;
    this->pX_ = x.pX_;
    this->pY_ = x.pY_;
    this->w_ = x.w_;
    this->x_ = x.x_;
    this->y_ = x.y_;
  }

  return *this;
}

sprite::
~sprite ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TextureAtlas_ (isrc, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TextureAtlas_ (isrc, h, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TextureAtlas_ (isrc, h, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TextureAtlas_ (isrc, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TextureAtlas_ (isrc, h, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TextureAtlas_ (isrc, h, f, p);
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::TextureAtlas > (
    ::TextureAtlas_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::TextureAtlas > (
      ::TextureAtlas_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "TextureAtlas" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::TextureAtlas > r (
      ::xsd::cxx::tree::traits< ::TextureAtlas, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "TextureAtlas",
    "");
}

::std::auto_ptr< ::TextureAtlas >
TextureAtlas_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "TextureAtlas" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::TextureAtlas > r (
      ::xsd::cxx::tree::traits< ::TextureAtlas, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "TextureAtlas",
    "");
}

::std::auto_ptr< ::sprite >
sprite_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sprite_ (isrc, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sprite_ (isrc, h, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sprite_ (isrc, h, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sprite_ (isrc, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sprite_ (isrc, h, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sprite_ (isrc, h, f, p);
}

::std::auto_ptr< ::sprite >
sprite_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::sprite > (
    ::sprite_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::sprite >
sprite_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::sprite > (
      ::sprite_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "sprite" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::sprite > r (
      ::xsd::cxx::tree::traits< ::sprite, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "sprite",
    "");
}

::std::auto_ptr< ::sprite >
sprite_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "sprite" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::sprite > r (
      ::xsd::cxx::tree::traits< ::sprite, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "sprite",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

